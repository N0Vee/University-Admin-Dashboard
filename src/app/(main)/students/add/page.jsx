'use client'
import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Sidebar from '@/app/components/Sidebar'
import { useUserRole } from '@/hooks/useUserRole'
import { studentValidationSchema, validateFormData } from '@/utils/validation'
import { FACULTIES, YEAR_LEVELS, ENROLLMENT_TYPES } from '@/constants'

import {
  ArrowLeftIcon,
  PhotoIcon,
} from '@heroicons/react/24/outline'
import {
  CheckCircleIcon
} from '@heroicons/react/24/solid'

export default function AddStudentPage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")
  
  // Use custom hook for user role management
  const { role, loading } = useUserRole(['admin', 'instructor'], '/students')

  const [formData, setFormData] = useState({
    title: '',
    titleEng: '',
    firstName: '',
    lastName: '',
    firstNameEng: '',
    lastNameEng: '',
    studentId: '',
    email: '',
    phone: '',
    birthDate: '',
    idCard: '',
    faculty: '',
    major: '',
    yearLevel: '',
    enrollmentType: '',
    address: '',
    emergencyContact: '',
    emergencyPhone: '',
    profileImage: null
  })

  const [showSuccessModal, setShowSuccessModal] = useState(false)

  // Validation function
  const validateForm = () => {
    return validateFormData(studentValidationSchema, formData, setError)
  }

  const autoGeneratedStudentId = async () => {
    try {
      const response = await fetch('/api/students/generate-id');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      return data.studentId;
    } catch (error) {
      console.error("❌ Error generating student ID:", error.message);
      return null;
    }
  };

  // รวม useEffect เพื่อจัดการ titleEng และ email ในที่เดียว
  useEffect(() => {
    let titleEng = ""
    if (formData.title === "นาย") {
      titleEng = "Mr."
    } else if (formData.title === "นางสาว") {
      titleEng = "Mrs."
    }

    const lastId = formData.studentId.slice(4)
    const email = formData.firstNameEng 
      ? `${formData.firstNameEng.toLowerCase()}${lastId}@sm.ac.th` 
      : ""

    setFormData(prev => ({
      ...prev,
      titleEng,
      email
    }))
  }, [formData.title, formData.firstNameEng, formData.studentId])

  useEffect(() => {
    const fetchId = async () => {
      const id = await autoGeneratedStudentId();
      setFormData(prev => ({
        ...prev,
        studentId: id
      }));
    };

    fetchId();
  }, []);


  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handleImageUpload = (e) => {
    const file = e.target.files[0]
    if (!file) return

    // ตรวจสอบขนาดไฟล์
    if (file.size > 10 * 1024 * 1024) {
      setError('ไฟล์รูปภาพต้องมีขนาดไม่เกิน 10MB')
      return
    }

    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif']
    if (!allowedTypes.includes(file.type)) {
      setError('รองรับเฉพาะไฟล์ JPG, PNG, GIF เท่านั้น')
      return
    }

    setFormData(prev => ({
      ...prev,
      profileImage: file
    }))
    setError('') // ล้างข้อความ error
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!validateForm()) return

    setIsLoading(true)
    setError('')

    try {
      // Create FormData for API submission
      const apiFormData = new FormData()
      
      // Add all form fields
      Object.keys(formData).forEach(key => {
        if (key === 'profileImage') {
          if (formData[key]) {
            apiFormData.append('profileImage', formData[key])
          }
        } else {
          apiFormData.append(key, formData[key])
        }
      })

      // Submit to API
      const response = await fetch('/api/students/add', {
        method: 'POST',
        body: apiFormData
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'เกิดข้อผิดพลาดในการเพิ่มนักศึกษา')
      }

      setShowSuccessModal(true)

    } catch (err) {
      console.error('Error adding student:', err)
      setError(err.message || 'เกิดข้อผิดพลาดไม่ทราบสาเหตุ')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-zinc-50">

      <div className="flex h-screen">
        {/* Sidebar */}
        <Sidebar currentPath="/students" />

        {/* Main Content */}
        <div className="flex flex-1 flex-col overflow-hidden">
          <main className="flex-1 relative overflow-y-auto focus:outline-none">
            <div className="py-6">
              <div className="mx-auto max-w-4xl px-4 sm:px-6 md:px-8">
                {/* Page header */}
                <div className="mb-6">
                  <button
                    onClick={() => router.back()}
                    className="inline-flex items-center text-sm text-gray-500 hover:text-gray-700 mb-4"
                  >
                    <ArrowLeftIcon className="h-4 w-4 mr-2" />
                    กลับไปยังจัดการนักศึกษา
                  </button>

                  <div className="md:flex md:items-center md:justify-between">
                    <div className="min-w-0 flex-1">
                      <h2 className="mt-2 text-2xl font-bold  text-gray-900 sm:truncate sm:text-3xl">
                        เพิ่มนักศึกษาใหม่
                      </h2>
                      <p className="mt-1 text-sm text-gray-500">
                        กรอกข้อมูลนักศึกษาใหม่เพื่อเพิ่มเข้าสู่ระบบ
                      </p>
                    </div>
                  </div>
                </div>

                {/* Form */}
                <div className="space-y-6">
                  {/* Profile Image Section */}
                  <div className="bg-white shadow rounded-lg p-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">รูปโปรไฟล์</h3>
                    <div className="flex items-center space-x-6">
                      <div className="shrink-0">
                        {formData.profileImage ? (
                          <img
                            className="h-20 w-20 object-cover rounded-full"
                            src={URL.createObjectURL(formData.profileImage)}
                            alt="Profile preview"
                          />
                        ) : (
                          <div className="h-20 w-20 rounded-full bg-gray-200 flex items-center justify-center">
                            <PhotoIcon className="h-8 w-8 text-gray-400" />
                          </div>
                        )}
                      </div>
                      <div>
                        <label htmlFor="profileImage" className="cursor-pointer">
                          <span className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            เลือกรูปภาพ
                          </span>
                          <input
                            id="profileImage"
                            name="profileImage"
                            type="file"
                            accept="image/*"
                            className="sr-only"
                            onChange={handleImageUpload}
                          />
                        </label>
                        <p className="mt-2 text-xs text-gray-500">PNG, JPG, GIF ขนาดไม่เกิน 10MB</p>
                      </div>
                    </div>
                  </div>

                  {/* Personal Information */}
                  <div className="bg-white shadow rounded-lg p-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">ข้อมูลส่วนตัว</h3>
                    <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
                      <div>
                        <label htmlFor="title" className="block text-sm font-medium text-gray-700">
                          คำหน้าชื่อ (ภาษาไทย)*
                        </label>
                        <select
                          name="title"
                          id="title"
                          required
                          value={formData.title}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        >
                          <option value="">เลือกคำหน้าชื่อ</option>
                          <option value="นาย">นาย</option>
                          <option value="นางสาว">นางสาว</option>
                        </select>
                      </div>

                      <div>
                        <label htmlFor="titleEng" className="block text-sm font-medium text-gray-700">
                          คำหน้าชื่อ (ภาษาอังกฤษ)*
                        </label>
                        <select
                          name="titleEng"
                          id="titleEng"
                          required
                          value={formData.titleEng}
                          disabled
                          className="text-gray-900 bg-gray-100 py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm cursor-not-allowed opacity-60 sm:text-sm">
                          <option value="">Choose title</option>
                          <option value="Mr.">Mr.</option>
                          <option value="Mrs.">Mrs.</option>
                        </select>
                      </div>


                      <div>
                        <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">
                          ชื่อ (ภาษาไทย)*
                        </label>
                        <input
                          type="text"
                          name="firstName"
                          id="firstName"
                          required
                          value={formData.firstName}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">
                          นามสกุล (ภาษาไทย)*
                        </label>
                        <input
                          type="text"
                          name="lastName"
                          id="lastName"
                          required
                          value={formData.lastName}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="firstNameEng" className="block text-sm font-medium text-gray-700">
                          ชื่อ (ภาษาอังกฤษ)*
                        </label>
                        <input
                          type="text"
                          name="firstNameEng"
                          id="firstNameEng"
                          required
                          value={formData.firstNameEng}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="lastNameEng" className="block text-sm font-medium text-gray-700">
                          นามสกุล (ภาษาอังกฤษ)*
                        </label>
                        <input
                          type="text"
                          name="lastNameEng"
                          id="lastNameEng"
                          required
                          value={formData.lastNameEng}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="studentId" className="block text-sm font-medium text-gray-700">
                          รหัสนักศึกษา *
                        </label>
                        <input
                          type="text"
                          name="studentId"
                          id="studentId"
                          required
                          value={formData.studentId}
                          disabled
                          className="text-gray-900 bg-gray-50 py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm cursor-not-allowed opacity-75 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="idCard" className="block text-sm font-medium text-gray-700">
                          เลขบัตรประชาชน (รหัสผ่านสำหรับล็อคอิน) *
                        </label>
                        <input
                          type="text"
                          name="idCard"
                          id="idCard"
                          required
                          value={formData.idCard}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="birthDate" className="block text-sm font-medium text-gray-700">
                          วันเกิด *
                        </label>
                        <input
                          type="date"
                          name="birthDate"
                          id="birthDate"
                          required
                          value={formData.birthDate}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                          อีเมล *
                        </label>
                        <input
                          type="email"
                          name="email"
                          id="email"
                          required
                          value={formData.email}
                          disabled
                          className="text-gray-900 bg-gray-100 py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm cursor-not-allowed opacity-60 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
                          เบอร์โทรศัพท์ *
                        </label>
                        <input
                          type="tel"
                          name="phone"
                          id="phone"
                          required
                          value={formData.phone}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>
                    </div>

                    <div className="mt-6">
                      <label htmlFor="address" className="block text-sm font-medium text-gray-700">
                        ที่อยู่
                      </label>
                      <textarea
                        name="address"
                        id="address"
                        rows={3}
                        value={formData.address}
                        onChange={handleInputChange}
                        className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                      />
                    </div>
                  </div>

                  {/* Academic Information */}
                  <div className="bg-white shadow rounded-lg p-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">ข้อมูลการศึกษา</h3>
                    <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
                      <div>
                        <label htmlFor="faculty" className="block text-sm font-medium text-gray-700">
                          คณะ *
                        </label>
                        <select
                          name="faculty"
                          id="faculty"
                          required
                          value={formData.faculty}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        >
                          <option value="">เลือกคณะ</option>
                          {FACULTIES.map((faculty) => (
                            <option key={faculty} value={faculty}>
                              {faculty}
                            </option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label htmlFor="major" className="block text-sm font-medium text-gray-700">
                          สาขาวิชา *
                        </label>
                        <input
                          type="text"
                          name="major"
                          id="major"
                          required
                          value={formData.major}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="yearLevel" className="block text-sm font-medium text-gray-700">
                          ชั้นปี *
                        </label>
                        <select
                          name="yearLevel"
                          id="yearLevel"
                          required
                          value={formData.yearLevel}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        >
                          <option value="">เลือกชั้นปี</option>
                          {YEAR_LEVELS.map((year) => (
                            <option key={year} value={year}>
                              {year}
                            </option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label htmlFor="enrollmentType" className="block text-sm font-medium text-gray-700">
                          ประเภทการเรียน *
                        </label>
                        <select
                          name="enrollmentType"
                          id="enrollmentType"
                          required
                          value={formData.enrollmentType}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        >
                          <option value="">เลือกประเภทการเรียน</option>
                          {ENROLLMENT_TYPES.map((type) => (
                            <option key={type} value={type}>
                              {type}
                            </option>
                          ))}
                        </select>
                      </div>
                    </div>
                  </div>

                  {/* Emergency Contact */}
                  <div className="bg-white shadow rounded-lg p-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">ผู้ติดต่อฉุกเฉิน</h3>
                    <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
                      <div>
                        <label htmlFor="emergencyContact" className="block text-sm font-medium text-gray-700">
                          ชื่อผู้ติดต่อฉุกเฉิน
                        </label>
                        <input
                          type="text"
                          name="emergencyContact"
                          id="emergencyContact"
                          value={formData.emergencyContact}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>

                      <div>
                        <label htmlFor="emergencyPhone" className="block text-sm font-medium text-gray-700">
                          เบอร์โทรศัพท์ฉุกเฉิน
                        </label>
                        <input
                          type="tel"
                          name="emergencyPhone"
                          id="emergencyPhone"
                          value={formData.emergencyPhone}
                          onChange={handleInputChange}
                          className="text-black py-2 px-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        />
                      </div>
                    </div>
                  </div>

                  {error && (
                    <div className="bg-red-500 text-white shadow rounded-lg p-4 mt-4">
                      <p className="font-semibold">เกิดข้อผิดพลาด:</p>
                      <p>{error}</p>
                    </div>
                  )}

                  <div className="flex justify-end space-x-3 pt-6">
                    <button
                      type="button"
                      onClick={() => router.back()}
                      className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      ยกเลิก
                    </button>
                    <button
                      type="button"
                      onClick={handleSubmit}
                      disabled={isLoading}
                      className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${
                        isLoading 
                          ? 'bg-gray-400 cursor-not-allowed' 
                          : 'bg-indigo-600 hover:bg-indigo-700'
                      } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                    >
                      {isLoading ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          กำลังเพิ่ม...
                        </>
                      ) : (
                        'เพิ่มนักศึกษา'
                      )}
                    </button>
                  </div>



                </div>
              </div>
            </div>
          </main>
        </div>
      </div>

      {/* Success Modal */}
      {showSuccessModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3 text-center">
              <div className="w-16 h-16 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center">
                <CheckCircleIcon className="h-8 w-8 text-green-600" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">เพิ่มนักศึกษาสำเร็จ!</h3>
              <p className="text-sm text-gray-500 mb-6">
                ข้อมูลนักศึกษาได้ถูกเพิ่มเข้าสู่ระบบเรียบร้อยแล้ว
              </p>
              <div className="flex justify-center space-x-3">
                <button
                  onClick={() => {
                    setShowSuccessModal(false)
                    // รีเซ็ตฟอร์ม
                    setFormData({
                      title: '',
                      titleEng: '',
                      firstName: '',
                      lastName: '',
                      firstNameEng: '',
                      lastNameEng: '',
                      studentId: '',
                      email: '',
                      phone: '',
                      birthDate: '',
                      idCard: '',
                      faculty: '',
                      major: '',
                      yearLevel: '',
                      enrollmentType: '',
                      address: '',
                      emergencyContact: '',
                      emergencyPhone: '',
                      profileImage: null
                    })
                    // สร้าง student ID ใหม่
                    const fetchNewId = async () => {
                      const id = await autoGeneratedStudentId()
                      setFormData(prev => ({ ...prev, studentId: id }))
                    }
                    fetchNewId()
                  }}
                  className="px-4 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  เพิ่มนักศึกษาคนต่อไป
                </button>
                <button
                  onClick={() => router.back()}
                  className="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium hover:bg-indigo-700"
                >
                  กลับไปหน้าจัดการ
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}